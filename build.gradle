description = "linkedhole Platform Shared"

defaultTasks 'clean', 'build'

loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    def verSubffix = hasProperty('release') ? '' : '-SNAPSHOT'
    setProperty 'environment', environment
    println "####### Environment is set to [$environment] #######"   
    println "####### VerSubffix is set to [$verSubffix]   #######"
    def configFile = file('environment.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    config.subffix= verSubffix
    setProperty 'config', config
}

ext {
    flatReposLocation = file('/repos').absolutePath
}

subprojects {
    
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse-wtp'
    
    repositories {
		mavenCentral()
        maven { url 'http://repo.springsource.org/libs-milestone' }
        maven { url 'http://repo.springsource.org/plugins-release' }
        flatDir { dirs flatReposLocation }
		// maven { url "$config.nexus.publicRepository" }
    }
    
    // 저장소를 지정하고,
    uploadArchives {
	    /**
        repositories.mavenDeployer {
            configureAuth = {
                  authentication(userName: "$config.nexus.userName", password: "$config.nexus.password")
            }
            snapshotRepository(url: "$config.nexus.snapshotRepository", configureAuth)
            repository(url: "$config.nexus.repository", configureAuth)
        }
		**/
		repositories {
            flatDir { dirs flatReposLocation }
       }
    }
  	
  	group = 'com.linkedhole.platform.shared'
    version = "1.0$config.subffix" 
    
    jar {
        manifest {
            attributes 'Implementation-Title': 'linkedhole-platform',
                       'Implementation-Version': version,
                       'Built-By': System.getProperty('user.name'),
                       'Built-Date': new Date(),
                       'Built-JDK': System.getProperty('java.version')
        }
    }
        
    sourceSets.main.classesDir = new File("./build/classes")
    sourceSets.test.classesDir = new File("./build/testClasses")
    
    eclipse {
        classpath {
            defaultOutputDir = file("build/classes")
            file {
                whenMerged { classpath ->
                    classpath.entries.findAll{ entry -> entry.kind == 'src' && entry.path.startsWith("src/test/") }*.output = "build/testClasses"
                }
            }
        }
    }
    
    // JDK 7 compatibility
    sourceCompatibility=1.7
    targetCompatibility=1.7
    
    // 정보 설정
    ext {    
        
        aspectjVersion = "1.6.10"
        slf4jVersion = "1.6.6"
        logBackVersion = "1.0.7"
        hibernateVersion = "4.1.7.Final"
        
        // When changing Spring Versions - don't forget to update bundlor ranges
        springVersionDefault = "3.1.3.RELEASE"
        springVersion = project.hasProperty("springVersion") ? getProperty("springVersion") : springVersionDefault
    
        springTestMVCVersion = "1.0.0.M1"
    }
    
    // 의존성에서 제외 모듈 등록
    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'javax.servlet', module: 'servlet-api', version: '2.+'
    }

    // JAVA 컴파일시 인코딩 설정
    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"
    
    // 공통  dependencies 설정 @jar를 붙여 의존성 파일을 전부 받지 않음
    dependencies {
        
        // Spring Common
        compile "org.springframework:spring-core:$springVersion@jar",
                "org.springframework:spring-beans:$springVersion@jar",
                "org.springframework:spring-context:$springVersion@jar",
                "org.springframework:spring-context-support:$springVersion@jar",
                "org.springframework:spring-aop:$springVersion@jar",
                "org.springframework:spring-aspects:$springVersion@jar",
                "org.springframework:spring-asm:$springVersion@jar",
                "org.springframework:spring-expression:$springVersion@jar",
                "org.springframework:spring-orm:$springVersion@jar",
                "org.springframework:spring-oxm:$springVersion@jar",
                "org.springframework:spring-tx:$springVersion@jar",
                "org.springframework:spring-jdbc:$springVersion@jar",
                "org.springframework:spring-webmvc:$springVersion@jar",
                "org.springframework:spring-web:$springVersion@jar"
        
        // Data Commons
        compile "org.hibernate:hibernate-core:$hibernateVersion@jar",
                "org.hibernate:hibernate-entitymanager:$hibernateVersion@jar",
                "org.hibernate.common:hibernate-commons-annotations:4.0.1.Final@jar",
                "org.jboss.logging:jboss-logging:3.1.2.GA@jar",
                "javax.transaction:jta:1.1@jar",
                "javax.persistence:persistence-api:1.0.2@jar",
                "dom4j:dom4j:1.6.1@jar",
                "mysql:mysql-connector-java:5.1.21@jar",
                "org.apache.tomcat:tomcat-jdbc:7.0.30@jar",
                "com.h2database:h2:1.3.160@jar"
                
                        
        // AspectJ
        compile "org.aspectj:aspectjrt:$aspectjVersion@jar",
                "aopalliance:aopalliance:1.0@jar"
        
        // Logging
        compile "ch.qos.logback:logback-core:$logBackVersion@jar",
                "ch.qos.logback:logback-classic:$logBackVersion@jar",
                "org.slf4j:slf4j-api:$slf4jVersion@jar",                
                "org.slf4j:jcl-over-slf4j:$slf4jVersion@jar",
                "org.slf4j:jul-to-slf4j:$slf4jVersion@jar",
                "org.perf4j:perf4j:0.9.16@jar",             
                "org.codehaus.janino:janino:2.6.1@jar",
                "org.codehaus.janino:commons-compiler:2.6.1@jar"
                    
        // Inject
        compile "javax.inject:javax.inject:1@jar"
        
        // Jackson JSON Processor
        compile "org.codehaus.jackson:jackson-core-asl:1.9.9",
                "org.codehaus.jackson:jackson-mapper-asl:1.9.9@jar"
        
        // JSR 303 with Hibernate Validator
        compile "javax.validation:validation-api:1.0.0.GA@jar",
                "org.hibernate:hibernate-validator:4.3.0.Final@jar"
        
        // Joda Time Library
        compile "joda-time:joda-time:1.6.2@jar"
        
        // Apache Commons
        runtime "commons-lang:commons-lang:2.6@jar"
        compile "org.apache.commons:commons-lang3:3.1@jar",     
                "commons-io:commons-io:2.4@jar",
                "commons-beanutils:commons-beanutils:1.8.3@jar",
                "commons-collections:commons-collections:3.2.1@jar",
                "commons-configuration:commons-configuration:1.9@jar",
                "org.apache.httpcomponents:httpclient:4.2.1@jar",
                "org.apache.httpcomponents:httpcore:4.2.2@jar"
                                
        // fest
        compile "org.easytesting:fest-assert:1.4@jar",
                "org.easytesting:fest-reflect:1.4@jar"
        
        // gson
        compile "com.google.code.gson:gson:2.2.2@jar"
        
        // guava
        compile "com.google.guava:guava:13.0.1@jar"
        
        // cglib
        compile "cglib:cglib-nodep:2.2.2@jar"
        
        // lombok
        compile "org.projectlombok:lombok:0.11.4@jar"
        
        // jasypt
        compile "org.jasypt:jasypt:1.9.0@jar",
                "org.jasypt:jasypt-spring3:1.9.0@jar"
        
        // Test
        testCompile "junit:junit:4.7@jar",
                    "org.easytesting:fest-mocks:1.1.1@jar",
                    "xmlunit:xmlunit:1.2@jar",
                    "com.jayway.jsonpath:json-path:0.8.1@jar",
                    "org.springframework:spring-test:$springVersion@jar"
    }
}